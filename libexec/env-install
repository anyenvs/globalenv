#!/usr/bin/env bash
# Usage: globalenv install <version>
# Summary: Install the specified version of

[ -n "${ENV_DEBUG}" ] && set -x
source ${GLOBALENV_ROOT}/libexec/helpers.sh

[ "${#}" -gt 1 ] && error_and_die "usage: ${binary} install [<version>]"

declare version
#version=${1//*-/}

if [ -z "${version}" ]; then
  version_file="$(binary=${binary} env-version-file)"
  if [ "${version_file}" != "${GLOBALENV_ROOT}/version" ]; then
    version="$(cat ${version_file} || true)"
  fi
else
  version="${version}"
fi

test -f "${GLOBALENV_ROOT}/globalrepos.env" && . ${GLOBALENV_ROOT}/globalrepos.env || (error_and_die "Missing ${GLOBALENV_ROOT}/globalrepos.env"; exit 1)
GLOBALENV_REPOS[$binary]="${GLOBALENV_REPOS[$binary]//,/ }"
#echo "${GLOBALENV_REPOS[$binary]}"
test "${#GLOBALENV_REPOS[$binary]}" == "1"
declare GLOBALENV_REPO
for i in ${GLOBALENV_REPOS[$binary]} ;do GLOBALENV_REPO+=("https://api.github.com/repos/$i") ;done
#GLOBALENV_REPO="https://api.github.com/repos/${GLOBALENV_REPOS[${binary}]}"
GLOBALENV_BIN=${binary}

echo GLOBALENV_REPOS=${GLOBALENV_REPOS[$binary]}
echo GLOBALENV_REPO=${GLOBALENV_REPO[@]}

## globalenv install --list
test "$1" == "--list" -o "$1" == "-l" && {
  eval which {wget,curl,jq,gsed,httping} &>/dev/null || { error_and_die "Please install wget curl jq gnu-sed httping" ; exit 0; }
  next="${GLOBALENV_REPO}?simple=yes&per_page=100&page="
  page=0
  while true; do
    page=$((page + 1))
    versions=$(wget -qO- "${next}${page}" | jq -r '.[] | {tag_name,name} | if (.tag_name != null) then .tag_name else .name end')
    test -n "$versions" || echo "$next$page - Emply Response"
    test -n "$versions" && { echo $next$page; echo $versions; } || break
  done
  exit 0
}

env_bin_path=$(test -d "${GLOBALENV_ROOT}/bin" && echo "${GLOBALENV_ROOT}/bin" )
dst_root="${GLOBALENV_ROOT}/versions"
dst_path=$(echo ${GLOBALENV_ROOT}/versions/${GLOBALENV_BIN}-${version##v})
if [ -f "${dst_path}/bin/${GLOBALENV_REPOS[${binary}_bin]:-*}" ]; then
  echo "${GLOBALENV_REPOS[${binary}_bin]:-${binary}} ${version##v} is already installed"
  exit 0
fi

_info "Installing ${GLOBALENV_REPOS[${binary}_bin]:-${binary}} ${version##v}"
mkdir -p ${dst_path}/bin || error_and_die "Failed to make directory ${dst_path}"

test "$1" != "--list" -a "$1" != "-l" && {
  next="${GLOBALENV_REPO}?simple=yes&per_page=100&page="
  page=0
  while true; do
    page=$((page + 1))
    [ -n "${ENV_DEBUG}" ] && set +x
    RELEASES=$( wget -qO- "${next}${page}" )
    [ -n "${ENV_DEBUG}" ] && set -x
    versions=$( jq -r '.[] | {tag_name,name} | if (.tag_name != null) then .tag_name else .name end' <<<${RELEASES})
    test -n "$versions" || break
    ## Check version with GLOBALENV_REPOS[${binary}_match]
    test -n "${GLOBALENV_REPOS[${binary}_match]}" && _URLS=( $( jq -r '.[] | {assets,tarball_url} | if (.assets != null) then .assets[]|select(.browser_download_url | match("'${GLOBALENV_REPOS[${binary}_match]}'") ).browser_download_url else select(.tarball_url | contains("'${GLOBALENV_REPOS[${binary}_match]}'")).tarball_url end' <<<${RELEASES} |uniq) )
    test -z "${_URLS}" && _URLS=( $( jq -r '.[] | {assets,tarball_url} | if (.assets != null) then .assets[]|select(.browser_download_url | contains("'${version##v}'") and contains("'$(_myOS)'","'$(_myOSCap)'","'$(_isMac)'","'$(_isMacOS)'","'$(_isOSX)'") and contains("'$(_myARCH)'","'$(_myARM64)'","'$(_myAARCH64)'","'$(_myMARCH)'") ).browser_download_url else select(.tarball_url | contains("'${version##v}'")).tarball_url end' <<<${RELEASES} |uniq) )
    ## Check version without GLOBALENV_REPOS[${binary}_match]
    test -z "${_URLS}" && _URLS=( $( jq -r '.[] | {assets,tarball_url} | if (.assets != null) then .assets[]|select(.browser_download_url | contains("'${version##v}'") and contains("'$(_myOS)'","'$(_myOSCap)'","'$(_isMac)'","'$(_isMacOS)'","'$(_isOSX)'") ).browser_download_url else select(.tarball_url | contains("'${version##v}'")).tarball_url end' <<<${RELEASES} |uniq) )
    test -n "${_URLS}" && break
  done
  echo "${_URLS[@]}" ;
  #exit 0 ;
}

GLOBALENV_BIN=${GLOBALENV_REPOS[${binary}_bin]:-${binary}}
test -n "${GLOBALENV_REPOS[${binary}_download]}" && _URLS=${GLOBALENV_REPOS[${binary}_download]}
#test -n "${GLOBALENV_REPOS[${binary}_download]}" -a "${#_URLS[@]}" == "1" && { eval "wget -qO ${dst_path}/bin/${GLOBALENV_BIN} ${_URLS}" >&2 || { rm -rf ${dst_path} ; error_and_die "Install failed" ; } ; }
case $(test ${#_URLS[@]} -gt 1; echo $?) in
    1)  ## case single _URLS
        ## if file is tar.gz archive
        [[ ${_URLS} =~ \.tar.gz|\.tgz|\.gz|\.tar.xz|tarball ]] && { eval "wget -qP ${dst_path}/bin/ --content-disposition ${_URLS}" >&2 || { [ -n "${ENV_DEBUG}" ] || rm -rf ${dst_path} ; error_and_die "Install failed" ; } ; }
        ## if file is zip archive
        [[ ${_URLS} =~ \.zip|zipball ]] && { eval "wget -qP ${dst_path}/bin/ --content-disposition ${dst_path}/bin/\$(echo \${_URLS##*/}) ${_URLS}" >&2 || test -f ${dst_path}/bin/*.zip || { [ -n "${ENV_DEBUG}" ] || rm -rf ${dst_path} ; error_and_die "Install failed" ; } ; }
        ## if file is not archived
        [[ ${_URLS} =~ \.tar.gz|\.tgz|\.gz|\.tar.xz|tarball|\.zip|zipball ]] || { eval "wget -qO ${dst_path}/bin/${GLOBALENV_BIN} ${_URLS}" >&2 || { rm -rf ${dst_path} ; error_and_die "Install failed" ; } ; }
    ;;
    0) ## case multiple _URLS
        echo multiple _URLS
        eval "for url in ${_URLS[@]} ;do wget -qO ${dst_path}/bin/\$(echo \${url##*/} | sed \"s/.$(_myOS).$(_myARCH)//\") \$url ;done" >&2 || { [ -n "${ENV_DEBUG}" ] || rm -rf ${dst_path} ; error_and_die "Install failed" ; } ;
    ;;
    *) ## other scenario ;;
esac
test -n "${GLOBALENV_REPOS[${binary}_script]}" && ( eval "${GLOBALENV_REPOS[${binary}_script]}" >&2 || { [ -n "${ENV_DEBUG}" ] || rm -rf ${dst_path} ; error_and_die "Install failed"; } )
test -n "${GLOBALENV_REPOS[${binary}_postscript]}" && ( eval "${GLOBALENV_REPOS[${binary}_postscript]}" >&2 || { [ -n "${ENV_DEBUG}" ] || rm -rf ${dst_path} ; error_and_die "Install failed"; } )
chmod +x "${dst_path}/bin"/${GLOBALENV_REPOS[${binary}_bin]:-*} || error_and_die "Install failed";

# Autocompletion
GLOBALENV_BIN=${GLOBALENV_REPOS[${binary}_bin]:-${binary}}
test -f ${dst_path}/tools/${GLOBALENV_BIN}.${SHELL##*/} && cp -fv ${dst_path}/tools/${GLOBALENV_BIN}.${SHELL##*/} ${GLOBALENV_ROOT}/completions/${GLOBALENV_BIN}-completion.${SHELL##*/}
test -n "${GLOBALENV_REPOS[${binary}_completion]}" && wget -qO ${GLOBALENV_ROOT}/completions/${GLOBALENV_BIN}-completion.${SHELL##*/} ${GLOBALENV_REPOS[${binary}_completion]}
test -f ${GLOBALENV_ROOT}/completions/${GLOBALENV_BIN}-completion.${SHELL##*/} && . ${GLOBALENV_ROOT}/completions/*.${SHELL##*/} &>/dev/null
test -f ${GLOBALENV_ROOT}/completions/${binary}.${SHELL##*/} && . ${GLOBALENV_ROOT}/completions/${binary}.${SHELL##*/} &>/dev/null

_info "Installation of ${GLOBALENV_BIN} ${version##v} successful"

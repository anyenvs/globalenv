#!/usr/bin/env bash

ARGO_REPO='argoproj/argo-workflows/releases'
ARGOCD_REPO='argoproj/argo-cd/releases'
DIVE_REPO='wagoodman/dive/releases'
BAZEL_REPO='bazelbuild/bazel/releases'
CERTMANAGER_REPO='cert-manager/cert-manager/releases'
EASYRSA_REPO='OpenVPN/easy-rsa/releases'
GHCLI_REPO='cli/cli/releases'
HELM_REPO='helm/helm/releases'
HELMFILE_REPO='helmfile/helmfile/releases'
ISTIO_REPO='istio/istio/releases'
KAF_REPO='birdayz/kaf/releases'
OPSDK_REPO='operator-framework/operator-sdk/releases'
TERRAGRUNT_REPO='gruntwork-io/terragrunt/releases'
DOCKER_COMPOSE_REPOS='docker/compose/releases'
KIND_REPO='kubernetes-sigs/kind/releases'
KUBECTL_REPO='kubernetes/kubectl/tags'
KUSTOMIZE_REPO='kubernetes-sigs/kustomize/releases'
OC_TARBALL_REPO='openshift/oc/tags'
OC_REPO='openshift/okd/releases'
OCM_REPO='openshift-online/ocm-cli/releases'
ROSA_REPO='openshift/rosa/releases'
PAGERDUTY_REPO='martindstone/pagerduty-cli/tags'
SOPS_REPO='mozilla/sops/releases'
STARSHIP_REPO='starship/starship/releases'
FISH_REPO='fish-shell/fish-shell/releases'
VALS_REPO='helmfile/vals/releases'
VELERO_REPO='vmware-tanzu/velero/releases'
CANARYCHECKER_REPO='flanksource/canary-checker/releases'
AWS_SESMAN_REPO='aws/session-manager-plugin/releases'

declare -A GLOBALENV_REPOS
## Argo-CD
GLOBALENV_REPOS[argocdenv]=$ARGOCD_REPO
GLOBALENV_REPOS[argocdenv_bin]=argocd
GLOBALENV_REPOS[argocdenv_match]="v${version##v}/argocd-$(_myOS)-$(_myARM64)$"
#GLOBALENV_REPOS[argocdenv_script]="cd \${dst_path}/bin; mv -fv argo-$(_myOS)-$(_myARM64).gz argo.gz; gunzip argo.gz && rm -fv *.gz"
## Argo-Workflow
GLOBALENV_REPOS[argoenv]=$ARGO_REPO
GLOBALENV_REPOS[argoenv_bin]=argo
GLOBALENV_REPOS[argoenv_match]="argo_${version##v}_$(_myOS)_$(_myARM64).gz$"
GLOBALENV_REPOS[argoenv_script]="cd \${dst_path}/bin; mv -fv argo-$(_myOS)-$(_myARM64).gz argo.gz; gunzip argo.gz && rm -fv *.gz"
## AWS Session Manager
GLOBALENV_REPOS[awssesmanenv]=$AWS_SESMAN_REPO
GLOBALENV_REPOS[awssesmanenv_bin]=session-manager-plugin
#GLOBALENV_REPOS[awssesmanenv_download]="https://s3.amazonaws.com/session-manager-downloads/plugin/latest/$(_isMac)_$(_myARM64)/sessionmanager-bundle.zip"
GLOBALENV_REPOS[awssesmanenv_download]="https://s3.amazonaws.com/session-manager-downloads/plugin/${version}/$(_isMac)_$(_myARM64)/sessionmanager-bundle.zip"
GLOBALENV_REPOS[awssesmanenv_script]="cd \${dst_path}/bin ; tar zxf sessionmanager-bundle.zip ; sudo \${dst_path}/bin/sessionmanager-bundle/install -i \${dst_path} -b /usr/local/bin/session-manager-plugin "
GLOBALENV_REPOS[awssesmanenv_postscript]="rm -rf \${dst_path}/bin/sessionmanager-bundle \${dst_path}/bin/*.zip"
## Bazel
GLOBALENV_REPOS[bazelenv]=$BAZEL_REPO
GLOBALENV_REPOS[bazelenv_bin]=bazel
#GLOBALENV_REPOS[bazelenv_download]="https://github.com/bazelbuild/bazel/releases/download/\${version}/bazel-\${version}-installer-$(_myOS)-$(_myARM64).sh"
GLOBALENV_REPOS[bazelenv_match]="bazel-${version##v}-installer-$(_myOS)-$(_myARM64).sh$"
GLOBALENV_REPOS[bazelenv_script]="bash \${dst_path}/bin/bazel-\${version}-installer*.sh --prefix=\${dst_path}"
GLOBALENV_REPOS[bazelenv_postscript]="ln -svnf \${dst_path} $HOME/.bazel && rm -rf \${dst_path}/bin/bazel-\${version}*"
## Certificate Manager
GLOBALENV_REPOS[certmenv]=$CERTMANAGER_REPO
GLOBALENV_REPOS[certmenv_bin]="kubectl-cert_manager"
GLOBALENV_REPOS[certmenv_match]="${version##v}/kubectl-cert_manager-$(_myOS)-$(_myARCH).tar.gz$"
GLOBALENV_REPOS[certmenv_script]="cd \${dst_path}/bin ; tar zxf kubectl-cert_manager-$(_myOS)-$(_myARCH).tar.gz && rm -fv *.tar.gz ; "
GLOBALENV_REPOS[certmenv_postscript]="cd \${dst_path}/bin ; ln -svnf \${dst_path}/bin/kubectl-cert_manager /usr/local/bin/kubectl-cert_manager"
## Canary Checker
GLOBALENV_REPOS[canarycheckerenv]=$CANARYCHECKER_REPO
GLOBALENV_REPOS[canarycheckerenv_bin]="canary-checker"
GLOBALENV_REPOS[canarycheckerenv_match]="${version##v}/canary-checker_$(_myOS)_$(_myARM64)$"
#GLOBALENV_REPOS[canarycheckerenv_script]="cd \${dst_path}/bin ; tar zxf kubectl-cert_manager-$(_myOS)-$(_myARCH).tar.gz && rm -fv *.tar.gz ; "
#GLOBALENV_REPOS[canarycheckerenv_postscript]="cd \${dst_path}/bin ; ln -svnf \${dst_path}/bin/kubectl-cert_manager /usr/local/bin/kubectl-cert_manager"
## EASY RSA
GLOBALENV_REPOS[easyrsaenv]=$EASYRSA_REPO
GLOBALENV_REPOS[easyrsaenv_bin]="easyrsa"
GLOBALENV_REPOS[easyrsaenv_match]="v${version##v}/EasyRSA-${version##v}.tgz$"
GLOBALENV_REPOS[easyrsaenv_script]="cd \${dst_path}/bin ; tar zxf EasyRSA-${version##v}.tgz && rm -fv *.tgz ; "
GLOBALENV_REPOS[easyrsaenv_postscript]="cd \${dst_path}/bin ; cp -fv EasyRSA-${version##v}/easyrsa ./"
## docker-compose
GLOBALENV_REPOS[dcenv]=$DOCKER_COMPOSE_REPOS
GLOBALENV_REPOS[dcenv_bin]=docker-compose
GLOBALENV_REPOS[dcenv_download]="https://github.com/docker/compose/releases/download/\${version}/docker-compose-$(_myOS)-$(_myAARCH64)"
#GLOBALENV_REPOS[dcenv_script]="bash \${dst_path}/bin/bazel-\${version}-installer*.sh --prefix=\${dst_path}"
GLOBALENV_REPOS[dcenv_postscript]="cd \${dst_path}/bin ; rm -fv *.sha256 ; chmod +x ./* ; mv docker-compose* docker-compose"
## Dive
GLOBALENV_REPOS[divenv]=$DIVE_REPO
GLOBALENV_REPOS[divenv_bin]=dive
GLOBALENV_REPOS[divenv_match]="dive_${version##v}_$(_myOS)_$(_myARM64).tar.gz$"
GLOBALENV_REPOS[divenv_script]="cd \${dst_path}/bin; tar zxf dive_${version##v}_$(_myOS)_$(_myARM64).tar.gz && rm -fv *.tar.gz"
## GITHub CLI
GLOBALENV_REPOS[ghenv]=$GHCLI_REPO
GLOBALENV_REPOS[ghenv_match]="gh_${version##v}_$(_isMacOS)_$(_myARM64).tar.gz$"
GLOBALENV_REPOS[ghenv_bin]=gh
GLOBALENV_REPOS[ghenv_script]="cd \${dst_path}/bin ; gh_file=( \$(ls gh_\${version##v}_$(_isMacOS)_$(_myARM64).{tar.gz,zip} 2>/dev/null) ) ;tar zxf \$gh_file --strip-components=2 || tar xvf \$gh_file --strip-components=2 ; rm -fv *.{tar.gz,zip} ; mv \${dst_path}/bin/man/man1/gh* /usr/share/man/man1/ 2>/dev/null || echo 'mv '\${dst_path}'/bin/man/man1/gh* /usr/share/man/man1/' "
## Helm
GLOBALENV_REPOS[helmenv]=$HELM_REPO
GLOBALENV_REPOS[helmenv_match]="helm-v${version##v}-$(_myOS)-$(_myARCH).tar.gz$"
GLOBALENV_REPOS[helmenv_bin]=helm
GLOBALENV_REPOS[helmenv_script]="wget -qO- https://raw.githubusercontent.com/helm/helm/master/scripts/get | sed 's/local supported=.*/local supported=\"$(_myOS)-$(_myARM64)\"/g' | HELM_INSTALL_DIR=\${dst_path}/bin bash -s - --version v\${version##v} --no-sudo"
#GLOBALENV_REPOS[helmenv_download]="https://github.com/helm/helm/releases/download/v\${version##v}/helm-v\${version##v}-$(uname -s)-$(uname -m | sed 's/x86_64/amd64/g')"
#GLOBALENV_REPOS[helmenv_completion]="https://raw.githubusercontent.com/roboll/helmfile/master/autocomplete/helmfile_${SHELL##*/}_autocomplete"
## Helmfile
GLOBALENV_REPOS[helmfilenv]=$HELMFILE_REPO
GLOBALENV_REPOS[helmfilenv_bin]=helmfile
GLOBALENV_REPOS[helmfilenv_script]="cd \${dst_path}/bin; wget -qO- \$_URLS | tar zxf -"
#GLOBALENV_REPOS[helmfilenv_download]="https://github.com/roboll/helmfile/releases/download/v\${version##v}/helmfile_$(uname -s)_$(uname -m | sed 's/x86_64/amd64/g')"
#GLOBALENV_REPOS[helmfilenv_completion]="https://raw.githubusercontent.com/roboll/helmfile/master/autocomplete/helmfile_${SHELL##*/}_autocomplete"
## VALS
GLOBALENV_REPOS[valsenv]=$VALS_REPO
GLOBALENV_REPOS[valsenv_bin]=vals
GLOBALENV_REPOS[valsenv_match]="vals_${version##v}_$(_myOS)_$(_myARCH).tar.gz$"
GLOBALENV_REPOS[valsenv_script]="cd \${dst_path}/bin; tar zxf vals_${version##v}_$(_myOS)_$(_myARCH).tar.gz && rm -fv *.tar.gz"
## Istio
GLOBALENV_REPOS[istioenv]=$ISTIO_REPO
GLOBALENV_REPOS[istioenv_match]="istio-${version##v}-osx.tar.gz$"
GLOBALENV_REPOS[istioenv_script]="cd \${dst_root} ; wget -qO- https://istio.io/downloadIstio | sed \"s%NAME=.*%NAME=istioenv-\${version##v}%g;s%tar -xzf%set -x; tar -C \${dst_path} --strip-components=1 -xzf%g;\" | ISTIO_VERSION=\${version##v} TARGET_ARCH=$(uname -m) sh -"
#GLOBALENV_REPOS[istioenv_postscript]="cd \${dst_root} ; test -d istio-\${version##v} && ( cp -rf istio-\${version##v}/ \${dst_path} ; ln -svnf \${dst_path} $HOME/.istio)"
GLOBALENV_REPOS[istioenv_postscript]="cd \${dst_root} ; test -d istioenv-\${version##v} && ( ln -svnf \${dst_path} $HOME/.istio)"
## Kaf
GLOBALENV_REPOS[kafenv]=$KAF_REPO
GLOBALENV_REPOS[kafenv_match]="kaf_${version##v}_$(_myOSCap)_$(_myARM64).tar.gz$"
GLOBALENV_REPOS[kafenv_bin]=kaf
GLOBALENV_REPOS[kafenv_script]="cd \${dst_path}/bin ; tar zxf kaf_${version##v}_$(_myOSCap)_$(_myARM64).tar.gz && rm -fv *.tar.gz "
## Kubectl
GLOBALENV_REPOS[kubectlenv]=$KUBECTL_REPO
GLOBALENV_REPOS[kubectlenv_bin]="kubectl"
GLOBALENV_REPOS[kubectlenv_match]="skip-download-and-use-script-to-install"
GLOBALENV_REPOS[kubectlenv_script]="cd \${dst_path}/bin ; wget -qO ./kubectl https://storage.googleapis.com/kubernetes-release/release/v${version##v}/bin/$(_myOS)/$(_myARCH)/kubectl"
GLOBALENV_REPOS[kubectlenv_postscript]="cd \${dst_path}/bin ; ln -svnf \${dst_path}/bin/kubectl /usr/local/bin/kubectl"

## Kustomize
GLOBALENV_REPOS[kustomizenv]=$KUSTOMIZE_REPO
GLOBALENV_REPOS[kustomizenv_bin]="kustomize"
GLOBALENV_REPOS[kustomizenv_match]="skip-download-and-use-script-to-install"
GLOBALENV_REPOS[kustomizenv_script]="cd \${dst_path} ; wget -qO- https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash -s \${version##*v} \${dst_path}/bin/"
## Kind
GLOBALENV_REPOS[kindenv]=$KIND_REPO
GLOBALENV_REPOS[kindenv_bin]="kind"
## Operator SDK
GLOBALENV_REPOS[opsdkenv]=$OPSDK_REPO
GLOBALENV_REPOS[opsdkenv_download]="https://github.com/operator-framework/operator-sdk/releases/download/v\${version##v}/operator-sdk_$(_myOS)_$(_myARCH)"
#"https://github.com/operator-framework/operator-sdk/releases/download/v${version##v}/ansible-operator_$(_myOS)_$(_myARCH)"
#"https://github.com/operator-framework/operator-sdk/releases/download/v${version##v}/helm-operator_$(_myOS)_$(_myARCH)"
GLOBALENV_REPOS[opsdkenv_postscript]="chmod +x \${dst_path}/bin/* ;grep -q operator-sdk $HOME/.bash_completion || echo -e '. <(operator-sdk completion ${SHELL##*/}) || true\n. <(ansible-operator completion ${SHELL##*/}) || true\n. <(helm-operator completion ${SHELL##*/}) || true' >> $HOME/.bash_completion ; . <(\${dst_path}/bin/operator-sdk completion ${SHELL##*/}) || true ;. <(\${dst_path}/bin/ansible-operator completion ${SHELL##*/}) || true ;. <(\${dst_path}/bin/helm-operator completion ${SHELL##*/}) || true"
## Terragrunt
GLOBALENV_REPOS[tgenv]=$TERRAGRUNT_REPO
GLOBALENV_REPOS[tgenv_bin]=terragrunt
## Openshift Cli
#GLOBALENV_REPOS[ocenv]=$OC_TARBALL_REPO
#GLOBALENV_REPOS[ocenv_match]="openshift-clients-${version##v}"
#GLOBALENV_REPOS[ocenv_script]="cd \${dst_path}/bin ; tar zxf openshift-oc-openshift-clients-\${version##v}*.tar.gz ; ls -d \${dst_path}/bin/openshift-oc-*/ && cd \$_ ; go mod tidy && go mod vendor && make oc && rm -fv *.tar.gz openshift-oc-* ;"
GLOBALENV_REPOS[ocenv_bin]=oc
GLOBALENV_REPOS[ocenv]=$OC_REPO
GLOBALENV_REPOS[ocenv_match]="openshift-client-$(_isMac)-${version##v}.tar.gz$"
GLOBALENV_REPOS[ocenv_script]="cd \${dst_path}/bin ; tar zxf openshift-client-$(_isMac)-\${version##v}.tar.gz && rm -fv *.tar.gz ; "
GLOBALENV_REPOS[ocmenv]=$OCM_REPO
GLOBALENV_REPOS[ocmenv_bin]=ocm
GLOBALENV_REPOS[rosaenv]=$ROSA_REPO
GLOBALENV_REPOS[rosaenv_bin]=rosa
## PagerDuty
GLOBALENV_REPOS[pdenv]=$PAGERDUTY_REPO
GLOBALENV_REPOS[pdenv_bin]=pd
#GLOBALENV_REPOS[pdenv_script]="cd \${dst_path} ; file=\$(echo bin/martindstone-pagerduty-cli-v\${version##v}-*.tar.gz) ; pd_hash=\$(echo \$file | cut -d '-' -f6 | sed -E 's%g(.*).tar.gz%\1%g') ; tar zxf \$file --strip-components=1 && sed 's%read yn%yn=y%g; s%rm -f%echo rm -f%g; s%ln -s%ln -svnf%g; s%\$SUDO%%g; s%/usr/local/lib%'\${dst_path}'%g; s%ms-pagerduty-cli.s3-us-west-2.amazonaws.com/channels/stable/pd-%ms-pagerduty-cli.s3.amazonaws.com/versions/'\${version##v}/\$pd_hash/pd-v\${version##v}-\$pd_hash-'%g' \${dst_path}/install.sh > \${dst_path}/install-\${version##v}.sh; yn=y bash \${dst_path}/install-\${version##v}.sh && rm -fv bin/*.tar.gz ; ln -svnf \${dst_path}/pd/bin/pd \${dst_path}/bin/pd"
GLOBALENV_REPOS[pdenv_script]="cd \${dst_path} ; file=\$(echo bin/martindstone-pagerduty-cli-v\${version##v}-*.tar.gz) ; pd_hash=\$(echo \$file | cut -d '-' -f6 | sed -E 's%g(.*).tar.gz%\1%g') ; tar zxf \$file --strip-components=1 && gsed 's%read yn%yn=y%g; s%rm -f%echo rm -f%g; s%ln -s%ln -svnf%g; s%\$SUDO%%g; s%/usr/local/lib%'\${dst_path}'%g; /.*URL=.*/a \ \ URL1=https://ms-pagerduty-cli.s3.amazonaws.com/versions/'\${version##v}/\$pd_hash/pd-v\${version##v}-\$pd_hash'-\\\\\$OS-\\\\\$ARCH.tar.gz ; httping -c1 -sm \\\\\$URL1 && URL=\\\\\$URL1 || true' \${dst_path}/install.sh > \${dst_path}/install-\${version##v}.sh; yn=y bash \${dst_path}/install-\${version##v}.sh && rm -fv bin/*.tar.gz ; ln -svnf \${dst_path}/pd/bin/pd \${dst_path}/bin/pd"
## SOPS
GLOBALENV_REPOS[sopsenv]=$SOPS_REPO
GLOBALENV_REPOS[sopsenv_bin]=sops
GLOBALENV_REPOS[sopsenv_match]="sops-v${version##v}.$(_myOS).$(_myARM64)$"
## StarShip
GLOBALENV_REPOS[starshipenv_bin]=starship
GLOBALENV_REPOS[starshipenv]=$STARSHIP_REPO
GLOBALENV_REPOS[starshipenv_match]="v${version##v}/starship-$(_myMARCH)-*-$(_myOS).tar.gz$"
GLOBALENV_REPOS[starshipenv_script]="cd \${dst_path}/bin ; tar zxf starship-$(_myMARCH)-*-$(_myOS).tar.gz && rm -fv *.tar.gz ; "
GLOBALENV_REPOS[starshipenv_postscript]="cd \${dst_path}/bin ; cp -fv \${dst_path}/bin/starship /usr/local/bin/starship"
## VELERO
GLOBALENV_REPOS[veleroenv_bin]=velero
GLOBALENV_REPOS[veleroenv]=$VELERO_REPO
GLOBALENV_REPOS[veleroenv_match]="velero-v${version##v}-$(_myOS)-$(_myARM64).tar.gz$"
GLOBALENV_REPOS[veleroenv_script]="cd \${dst_path}/bin ; tar zxf velero-v${version##v}-$(_myOS)-$(_myARM64).tar.gz --strip-components=1 && rm -fv *.tar.gz ; "
## FISH-SHELL
GLOBALENV_REPOS[fishenv_bin]=fish
GLOBALENV_REPOS[fishenv]=$FISH_REPO
GLOBALENV_REPOS[fishenv_match]="fish-${version##v}.tar.xz$"
GLOBALENV_REPOS[fishenv_script]="cd \${dst_path}/bin ; tar xf fish-${version##v}.tar.xz -C ../ && rm -fv *.tar.xz ; mkdir ../build; cd ../build ; cmake ../fish-${version##v} ; make ; make DESTDIR=../ install ; mv \${dst_path}/usr/local/bin/* \${dst_path}/bin/"
#GLOBALENV_REPOS[fishenv_postscript]="cd \${dst_path}/bin ; ln -svnf \${dst_path}/bin/fish /usr/local/bin/fish"

#for i in ${!GLOBALENV_REPOS[@]} ;do echo "${i}=${GLOBALENV_REPOS[$i]}"; done
for i in ${!GLOBALENV_REPOS[@]} ;do test -z ${i##*$binary*} && echo "${i}=${GLOBALENV_REPOS[$i]}" || true ;done
